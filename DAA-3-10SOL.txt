int minCoins(int coins[], int m, int V) {
    int dp[V + 1];

    // Initialize the dp table
    for (int i = 0; i <= V; i++) {
        dp[i] = INT_MAX;
    }

    // Base case: 0 coins required for 0 value
    dp[0] = 0;

    // Fill the dp table in a bottom-up manner
    for (int i = 1; i <= V; i++) {
        for (int j = 0; j < m; j++) {
            if (coins[j] <= i) {
                int sub_res = dp[i - coins[j]];
                if (sub_res != INT_MAX && sub_res + 1 < dp[i]) {
                    dp[i] = sub_res + 1;
                }
            }
        }
    }

    // If no combination is found, return -1
    if (dp[V] == INT_MAX) {
        return -1;
    }

    // Return the minimum number of coins
    return dp[V];
}